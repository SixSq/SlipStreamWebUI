(ns sixsq.slipstream.webui.history
  (:require
    [re-frame.core :refer [dispatch dispatch-sync]]
    [sixsq.slipstream.webui.utils :as utils]

    [secretary.core :as secretary :refer-macros [defroute]]
    [goog.events :as events]
    [clojure.string :as str])
  (:import
    [goog History]
    [goog.history Html5History EventType]
    [goog.history.Html5History TokenTransformer]))

;;
;; utilities for transforming between panel names and keywords
;;

#_(defn name->panel
  "Transforms the given panel name into the correponding namespaced
   panel keyword.  For example, 'apps' returns :panel/apps."
  [n]
  (when-not (str/blank? n)
    (keyword "panel" n)))

(defn panel->token
  "Transforms a panel keyword into the associated URL token.  For example, the
   keywork :panel/apps would be transformed to '/apps'."
  [panel]
  (when panel
    (str "/" (name panel))))

;;
;; initialize the history object
;;

(defn get-token
  "Creates the history token from the given location."
  [location]
  (str (.-pathname location) (.-search location)))

(defn create-transformer
  "Saves and restores the URL based on the token provided to the
   Html5History object.  The methods of this object are needed
   when not using fragment based routing. The tokens are simply
   the remaining parts of the URL after the path prefix."
  []
  (let [transformer (TokenTransformer.)]
    (set! (.. transformer -retrieveToken)
          (fn [path-prefix location]
            (get-token location)))
    (set! (.. transformer -createUrl)
          (fn [token path-prefix location]
            (str path-prefix token)))
    transformer))

(def history
  (doto (Html5History. js/window (create-transformer))
    (events/listen EventType.NAVIGATE #(secretary/dispatch! (.-token %)))
    (.setPathPrefix (utils/host-url))
    (.setUseFragment false)
    (.setEnabled true)))

;;
;; setup the client-side routing for URLs
;; single route captures all paths and sets the parsed path in the database
;; routing in this way ignores the query parameters and fragments
;;

(defroute "*" {path :*}
          (dispatch [:set-resource-path path]))

;;
;; method to be used for internal navigation between named resources
;;

(defn start
  "Sets the starting point for the history. No history event will be
   generated when setting the first value, so this explicitly dispatches
   the value to the URL routing."
  []
  (let [token (get-token (.-location js/window))]
    (.log js/console "start token: " token)
    (.setToken history (get-token (.-location js/window)))
    (secretary/dispatch! token)))

(defn navigate
  "Navigates to the panel (specified as a namespaced keyword) by pushing the
   corresponding token onto the HTML5 history object. Actual rerendering will
   be triggered by the event generated by the history object itself."
  [panel]
  (.setToken history (panel->token panel)))
